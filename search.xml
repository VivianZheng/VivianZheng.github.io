<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Requests构建http请求]]></title>
    <url>%2F2019%2F05%2F11%2Fpython%E5%A4%A7%E4%BD%9C%E4%B8%9A%2F</url>
    <content type="text"><![CDATA[需求：美元价格需要转化成欧元单位。程序要求：1、接收一个 CSV 文件为输入值2、对价格这一列进行货币转换3、输出这个文件的内容 限制条件：1、csv 文件解析器要自己实现，不能用库2、输出文件必须正确3、可以把数据从欧元改回美金 例 1： head data.csv 例 2： ./currency_convert –helpusage:currency_convert&lt;–field N–multiplier N][-i input][-o output] field N 价格信息在 CSV 的第 N 列，需要进行转换 multiplier N 转换方法为把当前的数值乘以 N N 是汇率 i input 从 input 文件内读取 CSV 文件内容（或者从 stdin 读入） o output 输出到 output 文件中（或者输出 stdout） linux 操作指令，规定了一些使用到的命名，以及表明程序使用环境为 linux]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>断点调试</tag>
        <tag>requests</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Requests构建http请求]]></title>
    <url>%2F2019%2F05%2F11%2FRequests%E6%9E%84%E5%BB%BAhttp%E8%AF%B7%E6%B1%82%E3%80%81%E5%93%8D%E5%BA%94%E4%B8%8E%E4%BC%9A%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[123import requestsr = requestes.get(&apos;https://api.github.com/events&apos;)print(r.content) #断点打在这一行 断点调试结果如下： r={Response} 表示r是一个Response的实例。 r.content 是响应的主体内容，以字节bytes的类型保存，把他转换成字典或者字符串之后就是我们想要的响应数据 r.cookies r.elapsed 请求的响应时间 r.status_code http响应的状态码 200\301\400\404\500 r.reason 包含一个短语，如果响应失败，会告诉失败原因 r.request 这个响应对应的请求 r.text 响应中数据转换成的文本 r.url 这个响应来自于哪个url 解析一个响应`import requests,jsonr= requests.get(‘https://api.github.com/events&#39;)print(r.content)dict_json=json.loads(r.content)print(dict_json) cookie 和 session 1.cookie是web服务器保存在用户浏览器上的小文本文件。它包含有关用户的信息，当用户再次访问这个 服务器时，服务器可以直接读取信息，无需再次输入。 2.session，会话。用户通常会在服务器提供的网页之间进行跳转来访问不同的页面，服务器对一个用户创建一个session对象，存放在服务器端，这样服务器就知道这个用户是谁了。session里也可以存放用户名等信息。session一般会过期自动终止. requests中的cookies 响应和请求都有cookie功能]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>断点调试</tag>
        <tag>requests</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网络分层与HTTP协议]]></title>
    <url>%2F2019%2F05%2F09%2F%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E4%B8%8EHTTP%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[接口测试手工测试是在图形界面操作，而接口测试则是把图形界面改成了接口测试的工具或脚本。 服务端程序接口测试的目标通常就是服务端程序。 图形界面程序提供给用户使用的界面。又叫 UI（User Interface）、图形化用户接口（GUI） 数据数据以包的形式在客户端和服务端程序之间传输，包的类型取决于封装在网络的哪一层。来回的过程涉及到封包和解包。 工具或脚本用工具模拟客户端程序的工作，像客户端一样封包，数据发送，在收到服务端返回信息后，解包，呈现数据。这种用代码模拟的做法，成为 Mock 协议什么是协议网络协议定义了计算机之间通信的方式,协议的核心是请求和响应协议定义了通信实体间,交换的报文格式,次序,以及发送和接受报文的方式,及处理动作. 网络分层 应用层和 HTTP 协议HTTP请求的三个组成部分：请求行：方法（get、post、delete等），URL，协议版本Hearder 头部Body请求体 服务器给的响应：状态行：版本、状态码、短语，比如HTTP1.1 404 NotFoundHearder 头部Body 请求体 状态码：200 请求成功301 Moved Permanetnly 请求内容已永久转移400 Bad Request 错误请求内容404 Not Found 请求资源找不到500 InternalServerError 服务器内部错误 传输层和 TCP协议 UDP协议传输层传输的是报文段，把应用层的报文从一个端传送到另一个端，应用层的报文，比如HTTP报文，可以通过TCP或者UDP来传输。 TCP：面向连接，能确保报文被传送到目的地，如果目的地没收到，会重新传。UDP：无连接，只把报文发出去。 TCP三次握手： 第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（seq=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。 完成三次握手，客户端与服务器开始传送数据。]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>SMTP</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何用VS code快乐写python，并配合selenium实现自动化测试]]></title>
    <url>%2F2019%2F05%2F07%2F%E5%A6%82%E4%BD%95%E7%94%A8VS-code%E5%BF%AB%E4%B9%90%E5%86%99python%E8%84%9A%E6%9C%AC%EF%BC%8C%E5%B9%B6%E9%85%8D%E5%90%88selenium%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[VScode+python(自用) 安装 annconda （官网：https://www.anaconda.com/） 安装注意选择 all users + auto path完成后进入 cmd 输入 python出现 python 版本即成功。 下载安装 VS code拓展搜索 python，安装 选择 python 解释器 ：ctrl+shift+p → python：select interpreter ：选择安装在 anaconda 中的 python 安装 selenium：终端输入 pip install selenium 已经装好会显示： 安装 firefox 与 chrome 驱动：chromedriver 下载页（含对应版本）： http://npm.taobao.org/mirrors/chromedriverfeckodriver 下载页：https://github.com/mozilla/geckodriver/releases下载完毕将 chromedriver.exe 和 geckodriver.exe 的文件路径配置到环境变量 path 中6、VS code 新建.py 文件运行代码 1234# -*- coding: utf-8 -*-from selenium import webdriverbrowser = webdriver.Chrome()browser.get(&apos;http://www.github.com/&apos;) 结果如下：]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>VScode</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[功能测试笔记PART5-软件测试报告、验收测试]]></title>
    <url>%2F2019%2F05%2F07%2F%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0PART5-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E3%80%81%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[测试报告内容1、报告信息2、引言3、测试概要4、测试结果与缺陷分析5、测试结论与建议6、测试限制 引言1、编写目的具体编写目的，指出预期的读者范围。2、项目背景3、系统简介设计说明书有此部分，照抄注意必要的框图和网络拓扑图4、评测产品对测试对象的描述包括但不限于文件、程序所在的 SVN 路径，SVN 版本号等信息5、测试概要声明、范围、目的等等。包含用例设计方法，简要介绍测试用例的设计方法。测试环境与配置，包含：数据库服务器配置、CPU、内存硬盘：可用空间大小操作系统、应用软件、局域网地址、服务器配置测试方法与工具，黑盒测试，如 LoadRunner、Monkey 等6、测试结果与缺陷分析主要汇总各种数据并度量，度量包括对测试过程的度量和能力评估，对软件产品质量度量和产品评估。测试执行情况与记录测试组织的架构图，包括：测试组架构（如存在分组、用户参与等情况）测试经理（leader）主要测试人员参与测试人员7、覆盖分析需求覆盖率是指经过测试的需求/功能和需求规格说明书中所有需求/功能的比值，通常情况要 100% 测试覆盖：需求/功能用例个数、执行总数、未执行、漏测分析和原因8、缺陷分析上述缺陷和其他收集数据进行综合分析用例质量=缺陷总数/测试用例总数*100%缺陷密度=缺陷总数/功能点总数测试曲线图：描绘被测系统每工作日/周缺陷数，得出缺陷走势和趋向。9、残留缺陷和未解决问题BUG 号缺陷概要 该缺陷描述的事实原因分析：如何引起缺陷，缺陷的后果，描述造成软件局限性和其他限制性原因，以及为解决原因预防和改进措施：弥补手段和长期策略10、测试结论分析测试执行是否充分（可增加 ui 安全性、可靠性、可维护性和性能描述）是否可以进入下一阶段项目目标对测试风险的控制措施和成效测试目标是否完成测试是否通过11、建议对系统存在问题说明，描述测试所揭露的软件缺陷和不足，以及可能给软件事实和运行带来的影响。可能存在的潜在缺陷和后续工作。对缺陷修改和产品设计的建议。 验收测试任务验收测试是向未来的用户表明系统能够像预定要求那样工作，也就是验证软件的有效性。功能和性能角度都符合用户期待Alpha 测试用户在开发环境下进行的测试比如：公司内部其他部门的用户在模拟实际操作环境下进行的测试特点：开发者坐在用户旁边。在系统开发接近完成时对应用系统的测试，测试后仍然会有少量设计变更。一般由最终用户或其他人员完成，不能由程序或测试员完成。 Beta 测试由软件的多个用户在一个或多个用户的实际使用环境下进行测试。开发者不在测试现场由用户记录问题，顶起向开发者报告相当于游戏内测]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>测试笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[功能测试笔记PART4-白盒、性能、自动化延申，测试工具使用]]></title>
    <url>%2F2019%2F05%2F07%2F%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0PART4-%E7%99%BD%E7%9B%92%E3%80%81%E6%80%A7%E8%83%BD%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96%E5%BB%B6%E7%94%B3%EF%BC%8C%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[测试优先级排序： 功能测试 → 自动化测试 → 安全测试 → 性能测试 白盒测试一、逻辑覆盖 逻辑覆盖是白盒中最主要的测试方法 分为语句覆盖、判定覆盖、条件覆盖、判定-条件覆盖、条件组合覆盖、其基本思路不同，产生的测试用例不同，覆盖范围也有所不同。 二、语句覆盖设计测试用例，运行被测程序，使程序中的每个可执行语句至少被执行一次。基本思想：每个判断的取真值和取假值都至少经历一次。 三、条件覆盖使每个条件的取真值和取假值都至少经历一次。 自动化测试WEB 自动化APP 自动化接口自动化自动化测试应用场景分析：1、需求变更由计划性，并且频率不高2、项目周期长，资源丰富3、脚本重复利用率4、代码规范 普遍存在的观点:认为自动化测试更适合回归测试和 API 测试，手工测试更适合做验收测试和 GUI 测试。正确的观点：什么区分了手工测试和自动化测试，实际上应该从代码是业务逻辑相关还是基础性代码出发。业务逻辑代码对应的是终端用户使用的功能，是实际完成工作的。基础性代码则确保业务逻辑代码运行在合适的环境中起支撑作用而彼此相对独立，并不存在业务关系的。 常见的 web 自动化测试工具：QTP：脚本语言 VBScriptSelenium（WebDriver）：开源，仅支持 web 页面测试，需要编写自动化脚本。 SeleniumWeDriver1、JDK 安装三个环境变量：PATH：新增%JAVA_HOME%\bin %JAVA_HOME%\jre\bin 两条JAVA_HOME：JDK 安装路径 如 E:\Program Files\Java\jdk-12.0.1CLASSPATH：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;检查安装成功：cmd→ 输入 java-version2、用 python 语言写脚本（自用） 安装 annconda （官网：https://www.anaconda.com/） 安装注意选择 all users + auto path 下载安装 VS code 拓展搜索 python，安装 选择 python 解释器 ：ctrl+shift+p → python：select interpreter ：选择安装在 anaconda 中的 python 安装 selenium：终端输入 pip install selenium 已经装好会显示： 安装 firefox 与 chrome 驱动：chromedriver 下载页（含对应版本）： http://npm.taobao.org/mirrors/chromedriverfeckodriver：https://github.com/mozilla/geckodriver/releases下载完毕将 chromedriver.exe 和 geckodriver.exe 的文件路径配置到环境变量 path 中6、VS code 新建.py 文件运行代码 1234# -*- coding: utf-8 -*-from selenium import webdriverbrowser = webdriver.Chrome()browser.get(&apos;http://www.github.com/&apos;) 结果如下： web 安全测试web 应用：web 应用时由动态脚本、编译过的代码等组合而成架设在 web 服务器上，用户在 web 浏览器上发送请求。http 协议 web 应用三层架构：用户端-中间层（web 服务器）-数据层安全测试主要是在中间层进行， 尤其是 web 层到应用层的传输是安全测试的重点。常用的安全手段：① 登录输入验证码（防脚本、机器人等）② 长时间不操作，session 会失效③https WEB 安全漏洞分类WASCweb application security consortium负责为 WWW 制定应用安全规范六大类安全威胁：Authentication（验证）：确认应用身份的攻击手段Authorization（授权）：Client-Side Attacks（客户端攻击）：扰乱或探测 web 站点用户的攻击手段Information Disclosure（信息暴露）：获取站点具体系统信息的攻击手段Logical Attacks （逻辑性攻击） OWASP 自动化审计工具AppScan、WebInspect 性能测试为什么进行性能测试： 多个客户端同时访问造成压力 种类：负载测试、压力测试、容量测试、配置测试、并发测试、可靠性测试、稳定性测试、 LoadRunner（商用）通过模拟一个多用户并行工作的环境来对应用程序进行负载测试。 手机 APP 测试移动 app 测试的区别——场合复杂程度”弱网概念“ 网络信号不稳定——输入种类多样性——操作尺度：触屏操作尺度大，点击误差大，也不支持 hover 事件，点击出错率高——界面布局：屏幕相对窄小，一般单列，屏幕可以旋转 APP 测试方法 功能测试 专项测试 稳定性测试 兼容性测试 UI 测试 专项测试——安装测试1、从不同渠道获取安装程序是否正常安装2、不同操作系统下安装是否正常3、安装后是否鞥正常运行，安装后文件是否写到制定目录中4、过程中是否可以取消，点击取消后写入的文件是否跟概要设计说明处理5、安装过程中意外情况（死机、重启、断电）处理6、安装空间不足是否有相应提示…… 专项测试——卸载测试、交互测试、升级测试、性能测试多个 app 同时运行是否影响、运行时前后台切换是否正常、运行时切换其他 app、运行拨打电话、切换网络等等 UI 测试 APP 自动化测试工具——Appium]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>测试笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[功能测试笔记PART3-软件测试执行管理]]></title>
    <url>%2F2019%2F05%2F07%2F%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0PART3%2F</url>
    <content type="text"><![CDATA[测试准入准出标准：1、开发编码结束，并在开发环境已完成单元测试2、需求规定的功能已实现，若没有完全实现，需提供测试范围3、已完成集成测试，基本流程可以走通，界面功能已实现，代码评审并符合软件编码规范。4、开发提交代码，提交并通知测试测试5、兼容性测试要求明确6、安全测试和性能测试范围和要求 测试暂停、停止1、冒烟测试发现重大 bug，或者 bug 过多，流程卡壳等，可暂停测试返回开发2、被测项目暂停 测试暂停3、优先级更高的任务 暂停测试 发现缺陷1、用户体验差2、界面明显错误信息3、功能不完备没有按需求说明写代码，导致功能确实4、功能不完善、流程不正常、异常情况处理5、逻辑不正确，与需求说明书、测试用例不符6、交互性不好，与其他模块集成出现问题7、性能不好，压力承载差 缺陷报告前提：上报的缺陷一定要是可以重现的缺陷。偶发性问题可以先写在报告里，视优先级，后续跟踪处理。缺陷报告不仅给开发看，还有质管人员、市场部产品等需求方。 缺陷报告包含信息 易于搜索软件测试报告的缺陷 报告的软件缺陷进行了必要的隔离，报告的缺陷信息具体、准确。 软件开发人员希望获得缺陷的本质特征和复现步骤。 市场和技术支持等部门希望获得缺陷类型分布以及对市场和用户的影响程度。 缺陷报告的写作准则（5C） Correct（准确）：每个组成部分的描述准确，不会引起误解。 Clear（清晰）：每个组成部分的描述清晰，易于理解。 Concise（简洁）：只包含不可少信息即可。 Complete：包含复现 bug 的完整步骤和其他本质信息。 Consistent（一致）：按照一致的格式书写全部缺陷报告。 缺陷报告的组织架构1、缺陷标题2、缺陷基本信息3、软件和硬件环境4、软件版本5、缺陷类型6、缺陷严重程度7、缺陷的处理优先级8、复现缺陷的操作步骤9、缺陷的实际结果描述10、期望的正确结果描述11、注释文字和截取的缺陷图象 提供测试的预备步骤和信息 简单一步步引导复现缺陷 每个步骤尽量只记录一个操作 每个步骤前使用数字对步骤编号 使用短语和短句，避免复杂描述 复现操作步骤要完整准确简短 没有缺漏任何操作步骤 每个步骤都是准确的 没有多余步骤 常见步骤合并为较少步骤 缺陷报告原则 组织 Structure 最好做详尽的记录 重现 Reproduce 必须检查问题是否可以重现，如果不可重现仍然要记录。（原则：编写缺陷报告之前反复尝试 3 次） 隔离 Isolate 写之前隔离错误，改变变量，看看是否由于 对比 Compare 如果以前验证过现在出错的测试用例，那么就该检查以前的测试结果，同样条件下以前的测试是否通过，如果通过，那么这就是个回归 bug。 总结 Summarize 第一行写总结，清楚看到这次功能需要修改哪些地方 精简 消除歧义 中立 保持公正的原则 检查 给一个或多个同行检查 缺陷跟踪（BUG 管理）JIRA、BUGZILLA、QC、禅道项目模式基本流程1、产品经理创建产品2、产品经理创建需求3、项目经理创建项目4、项目经理确定项目要做的需求5、项目经理分解任务，指派别人6、测试人员测试，提交 bug 易用性测试指用户在使用软件时是否感觉方便，比如是否最多点击鼠标三次就可以达到用户目的。易用性测试包括对应用程序的测试，同时还包括对用户手册系统文档的测试。通常采用质量外部模型来评价易用性。 包含以下方面：1、易理解 2、易学习性 3、易操作性 4、吸引性 5、依从性 兼容性测试浏览器测试：浏览器兼容 操作系统兼容浏览器内核：IE\Chrome\FireFox\其他国产浏览器基本都是 chrome 内核改了改，选一个有代表性的浏览器测试即可。工具：Letester （越来越少）www.browsershots.org 越来越多 通过在线截图的方式展现页面的兼容性（限制在于只可以通过输入网址查看，未上线的项目无法查看）SuperPreview 微软 （尚未完善） APP 测试：人工测试、第三方测试工具]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>测试笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[功能测试笔记PART2-测试用例设计方法与实战]]></title>
    <url>%2F2019%2F05%2F07%2F%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0PART2%2F</url>
    <content type="text"><![CDATA[如何设计软件设计【测试用例设计】一、测试设计与测试用例 测试设计：将概括的测试目标转化为具体的测试条件和测试用例的一系列活动。 测试分析和设计的主要任务： 评审测试依据（需求、系统架构、设计、接口说明等）做到心中有数，理解北侧的系统是什么状态，包含什么内容。 评估测试依据和测试对象的可靠性（文档很完善，但是到了实际测试过程中发现实际情况和文档不一样，项目迭代和运行过程中，需求接口等一直在变，但是没有记录到文档中） 通过对测试项、规格说明、测试对象行为和结构分析，识别测试条件并确定优先级 设计测试用例，并确定优先级 确定测试条件和测试用例所需的必要的测试数据 确定测试条件 依据在测试策略或测试计划中确定的测试技术。比如 要做性能自动化兼容测试等. 通过对测试依据和测试目标的分析。可以确定需要测试的内容，获得测试条件。 确定测试用例 测试用例：是通过使用在测试计划中确定的测试技术，对于已确定的测试条件进行逐步推敲，精炼而设计出来的重点说明如何具体操作产生何种结果的文档。（指引测试的步骤文档，包含场景、方法论 等的设计） 测试用例应该具有 可重复性、可验证性 和需求可追踪性 不能一概而说。 测试用例设计包括以下关键点 前提条件，如项目或局部测试环境的需求，及其交付计划 测试步骤 测试数据 预期结果 测试用例案例| 序号 | 模块名称 | 测试子项 | 用例名称（测试意图） | 用例级别 | 预置条件 | 测试步骤 | 预期结果 | 测试结果 | 缺陷编号 | 备注 || —- | ——– | ——– | ——————– | ——– | ——– | ——– | ——– | ——– | ——– | —- || 1 | 大模块 | 小模块 | | | | | | | | | | || 2 | | | | | | | | | | | | | 测试用例常用设计方法 等价类划分法 边界值法 因果图设计法 判定表设计法 正交实验法 一、等价类划分法项目：测试一个两位数的加法计算器测试需求：测试两个参数的值相加后的结果是否正确。 隐藏需求：输入的数值在-99 到 99 之间 大于 99 或小于-99 的数应该被拒绝输入并显示错误信息。 开始测试：分别给第一个参数和第二个参数输入下表中的值，得到测试结果如表所示不能把-99 到 99 所有数的相加情况都测试一遍，那么问题有：1、在测试了 1+1 1+2 1+（-1） 等这些情况之后，是否还有必要测试 1+3，1+4 呢2、如果不穷举测试，能否放心的认为所有的参数组合都是正确的？ 等价类划分法：概念 把程序的输入域划分为若干部分 然后从每个部分中选取少数代表性数据作为测试用例 每一类的代表性数据在测试中的作用等价于这一类中的其他值 也就是说，如果某一类中的例子发现了错误，这一等价类中其他例子也能发现同样错误，反之同理。 等价类划分法：原则 如果输入条件规定了取值范围或值的个数，则可以确定一个有效等价类和两个无效等价类。比如 [-99,99]为取值区间，则大于 99 和小于-99 的都是无效等价类 如果输入条件说明了一个“必须成立”的情况，则可划分一个有效等价类和一个无效等价类。比如 “今天必须完成 100 题” ，则“完成 100 题”是有效等价类 “未完成 100 题”是无效等价类。 如果输入条件规定了一组可能的值，而且程序是用不同的方式处理每一种值，则可为每一种值划分一个有效等价类，并划分一个无效等价类。 如果确知，已划分的某等价类中的各元素（例子）在程序中处理的方式是不同的，则应据此将此等价类进一步划分为更小的等价类。 确立了等价类之后，建立等价类表，列出所有划分出的等价类。 基于等价类划分的用例设计 明确测试对象，非测试对象保证正确。 为每个等价类规定一个唯一编号 设计测试用例，尽可能多的覆盖尚未覆盖的有效等价类。 重复，最终似的所有等价类均被测试用例覆盖。 设计一个新的测试，使其只覆盖一个无效等价类。重复，直至所有无效等价类均被覆盖。 等价类划分实战项目：测试一个两位数的加法计算器测试需求：测试两个参数的值相加后的结果是否正确。 Step1：根据测试需求可以分为三个等价类：1、一个有效数据的等价类，两个无效数据等价类有效等价类： -99&lt;=数值&lt;=99无效等价类：数值99Step2：建立等价类表：Step3：确定测试用例：1、为等价类表中的每一个等价类分配一个唯一编号2、设计一个新的测试用例，使它能够尽量覆盖尚未覆盖的有效等价类3、重复，直至所有有效等价类均被测试用例覆盖4、与上步类似，设计一个新的测试用例，使它只覆盖一个无效等价类5、重复，直至所有无效等价类均被测试用例覆盖Step4：细化等价类划分 在测试”-99~99“的这个等价类区间时，10+40、-20+30、-30+（-30）正数相加、正负数相加、负数相加也是不同的等价区间 细化之后的等价类表PS：无效等价类中还有非数字情况，可以加上。 Step5：完善测试用例 根据上面划分的 4 个等价类，我们至少需要有 5 个测试用例 等价类的特点 测试相同的内容 如果等价类中的一个测试能够捕获一个 bug，那么选择该等价类的其他测试也能捕获该 bug 如果等价类中的一个测试不能捕获 bug，那么其他的也不能 如果正确的划分等价类，可以大大降低测试用例的数量，测试会准确有效 如果错误的将两个不同的等价类当作一个等价类，就会遗漏一种测试情况 等价类划分要注意的问题 不但要考虑有效等价类，也要考虑无效等价类 仔细划分，审查划分 （实际不仅一个人划分，群策群力，还有评审） 过于粗略可能会漏掉 bug 组织评审 【等价类用例设计练习】测试需求：余额宝提现到银行卡增加新规则：快速到账（2h）日限额 1w 分析过程： 超过 1W 只能选择普通到账 选择快速到账才有限制 设计用例思路：首先分为两个功能（快速提现和普通提现），然后快速提现要求金额在 0 和 1W 之间（有效等价类），提现小于 0 和大于 1W 都是无效。其次普通提现不受限制，只要求提现金额在 0 和余额之间即可，（所以 0 和总余额之间都是有效值），无效指为小于 0 以及大于总余额。优化：日限额 1W，可以是当天多次提现，要对总提现额度做划分（第一次和第 N 次）PS：由于每次操作对应的功能场景不一样，所以每次无效等价类对应的&lt;=0 的情况都是不同的，比如第一次输入的提现金额为 0 和第二次提现金额 0 是不一样的。 思考题需求说明：一个程序读入三个整数，把这三个数值看作一个三角形的 3 条边的长度值利用等价类划分法，给出足够的测试用例。优化建议： 二、边界值划分法边界值分析法是一种补充等价划分的测试用例设计技术，它不是选择等价类的任意元素，二十选择等价类边界的测试用例。 以两位数相加计算器为例由于允许输入的值在-99 和 99 之间，所以-99 和 99 可看作两个边界值，测试的时候选取紧邻边界值的数值和边界值本身： 用边界值设计余额宝需求测试用例思路：边界为 0、1W-已提现金额、1W，总余额最大值，取边界和紧邻边界的值：-1、0、1、9999、10001 等PS：最大值为约定数值，比如余额宝中最多可输入七位数。 三、因果图和判定表法等价类划分和边界值分析都是着重考虑输入条件，而不考虑输入条件的各种组合、输入条件之间的相互制约关系。 如果在测试时必须考虑输入条件的各种组合，则可能的组合数目将是天文数字，因此必须考虑采用一种适合于描述多种条件的组合、产生多个相应动作的测试方法，就需要因果图（逻辑模型） 因果图：从程序规格说明书中找出因（输入条件） 和 果（输出结果或程序状态的改变） 将因果图转化为判定表。为判定表中的每一列设计一个测试用例。 判定表：分析和表达多逻辑条件下执行不同操作的工具。 由四个部分组成： 条件桩：列出了问题的所有条件，次序一般无所谓。 动作桩：列出可能的操作和结果。 条件项：列出针对它左列条件的取值，在所有可能情况下的真假值。 动作项：列出条件项的各种取值情况下应该采取的动作。 因果图设计步骤：1、分析软件规格中那些是原因，哪些是结果？并给每个原因和结果赋予一个标识符。 2、找到原因和结果之间、原因和原因之间的相互关系。 3、有些组合情况不可能出现，为表明这些情况，在因果图上使用一些记号表明约束或限制条件。 4、把因果图转换为判定表。 5、根据判定表的每列设计用例。 两位数计算器实战 余额宝例子面试题 【工资发放】a1 年薪制 a2 月薪制 a3 普通错误 a4 严重错误a1 和 a2 互斥；b1 b2 和 b3 b4 互斥 a3 和 a4 可同时具备。 四、正交实验法是从大量的试验点中选取适量的、有代表性的点，应用迦罗卡瓦理论导出的“正交表”，合理的安排试验的一种科学试验设计法。（很少用到，一般大型系统才会用到，正常情况下极少有穷举所有的情况） 设计步骤1、提取功能说明，构造因子——状态表2、加权筛选，生成因素分析表（优先级确定，删掉优先级低的）3、利用正交表构造测试数据集4、利用正交表每行数据构造测试用例案例：测试支付宝 web 网站，站点有大量的服务器和操作系统，并且有多种浏览器及其插件 五、场景法由于上述方法比较单一从输入输出两方面考虑，但现在的软件几乎都是事件触发来控制流程的，事件触发时的情景形成场景，而同一事件不同的触发顺序和处理结果就形成了事件流。tb 购物流程 测试用例综合设计1、测试用例项划分经典方法：瀑布模型，从上到下，逐渐细分，大模块包含小模块，更小模块（类似俄罗斯套娃），把系统划分成一块一块的，来测试，保证系统的完整性。 2、切面设计功能点切面：最常见的切面，通常认为页面上的一个按钮就是一个功能点。根据功能的复杂程度，按每个功能进行用例的撰写。隐含切面：完整业务流程的测试；从需求、业务角度进行编写。比如完整的购物流程。 3、功能点用例设计 任何情况都必须使用边界值分析法，经验表明这种方法找出 bug 能力最强 必要时用等价类划分法补充 如果程序功能说明中含有输入条件的组合情况，则可以用因果图法 业务复杂度高，则补充场景法 举例：共享单车充值案例 1、边界值：充值金额 0、1、-1、多位小数、银行卡限额等2、充值选择不同银行、支付渠道，所以针对支付宝、微信、银联等渠道分别设计测试用例3、考虑异常，充值失败，银行卡余额不足，银行账户异常，银行卡返回超时等。场景法4、更复杂的业务场景，比如满减、满赠、抽奖等等 ———————————————–分割线——————————————————–]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>测试笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[功能测试笔记PART1测试理念]]></title>
    <url>%2F2019%2F05%2F07%2F%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E7%AC%94%E8%AE%B0PART1%E6%B5%8B%E8%AF%95%E7%90%86%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[软件分类：系统软件：负责管理计算机系统中各自独立的硬件，使得他们可以协调工作。 应用软件：为了某种特定的用途而被开发的软件，它可以是一个特定的程序，比如一个浏览器，也可以是一组功能联系紧密，可以互相协作的程序的集合。 软件生命周期：问题定义（确定好要解决的问题）→ 可行性研究（该问题是否可以解决）→ 需求分析 → 概要设计 → 详细设计 → 编码和单元测试 → 综合测试 → 软件维护 文档：需求分析文档 概要设计文档 详细设计文档（包含使用的方案，架构，体系，同时还包含接口名称、调用方式，数据库结构、落库结构、数据样式） 测试设计文档（测试方案，需要包含哪些方面，哪些方面，哪些功能点，是否交互，交互是否使用联合测试） 测试用例（测试依据，针对一个系统/功能点测试时的一个规范条文） 测试报告（包含测试用例，多少个 bug，修复多少，失败多少等） 软件测试的目的：软件测试目的在于发现问题，检查系统是否满足需求。 软件测试方法和分类生命周期各测试方法对比：​常见术语：C/S： C：客户端 Client，S 服务器端 Server，这种软件是基于局域网或互联网的，需要一台服务器来安装服务器软件，每台客户端都要安装客户端软件。比如 QQ，游戏等数据 C/S 结构。 B/S：B 浏览器 Browser，S 指服务器，不需要安装客户端，只要有浏览器就可以 i 直接使用，比如 Sina sohu，B/S 结构软件是主流，便于升级和维护，是测试重点。 APP: 缺陷:(Bug/Defect)指软件中（包括程序和文档）不符合用户需求的问题 测试环境： 测试环境=软件+硬件+网络 测试用例 Test Case：测试执行之前设计的一套详细的测试方案，包括测试环境，测试步骤，测试数据和预期结果。 测试用例=输入+输出+测试环境；“输入”包括测试数据和操作步骤，“输出”指期望结果，“测试环境”指系统环境设置。 冒烟测试 Smoke Testing:在对一个新版本进行系统大规模地测试之前，先验证一个软件的基本功能是否实现，是否具备可测性。如：该版本上线购物功能，购物流程是否能走完。 α 测试：验收测试的一种，指的是由用户、测试人员、开发人员等共同参与的内部测试。 β 测试：验收测试的一种，指的是内测后的公测，即完全交给最终用户测试。比如游戏删档公测。 软件测试常见模型：V 模型： W 模型：研发线和测试线 H 模型：测试完全独立出来，各阶段可以反复触发迭代增量，将测试准备活动和执行活动清晰的体现。 X 模型： 项目进程：1、编程阶段：单元 白盒- 测试参与2、编程完成-开发联调 ：集成测试 -开发为主3、提测-冒烟测试（自动化为主，手工为辅）-测试执行4、测试阶段-系统测试（黑盒功能测试为主，自动化/接口测试为辅，根据项目进行性能、安全测试）5、验收阶段-验收测试-测试配合用户需求 软件测试概念： 1）经典定义：软件测试，在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。 2）标准定义：软件测试是使用人工或者自动的手段来运行或测定某个软件系统的过程，其目的在于检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别。 测试覆盖率：覆盖率是用来度量测试完整性的手段，同时也是测试技术有效性的度量。 覆盖率=（至少被执行一次的 item 数）/item 总数 1、黑盒测试：需求覆盖=（被验证的需求数量）/（总需求数量）一般要求 100%用例覆盖=（验证通过的用例数量）/（总用例总数） 80%以上简单的测试覆盖率=本次测试执行的用例数/所有用例数基于产品的测试覆盖率=已测需求点/设计所有需求数以产品、需求维度统计，无论大型或者小需求迭代都要求覆盖率 100% 2、白盒测试：大多工具判断语句覆盖，即单元测试代码覆盖代码行/总代码行 要求 80%以上缺陷：仅能代表测试过哪些代码，不能代表是否测试好这些代码，容易遗漏逻辑判断等场景 3、基于自动化的测试覆盖率：自动化覆盖的测试场景（测试用例）/所有测试场景（用例）用户 80%的时间在使用 20%的功能，自动化测试用例选择着重于 20%的核心功能用途：自动化测试更着重于回归验证，没必要追求过高覆盖率，而要考虑用例设计 测试覆盖率的最终意义：应用最多的地方在测试停止标准单纯讨论测试覆盖率，在瀑布式开发模型中并不重要，但在螺旋式、敏捷开发模型中，由于不断迭代累加，很难确定哪些模块在开发过程中没有给予足够的测试。在短迭代、DevOps 中，更强调单元测试覆盖率来评估不断增加的代码数量。 软件测试人员需要的知识体系软件测试基础知识软件测试流程测试用例设计方法兼容性测试/易用性测试缺陷管理测试工具使用测试文档编写具备的素质：踏实细心、积极主动、好奇心、交流能力、自我提高和总结、责任感…… 测试原则：原则 1：所有的测试都应追溯到用户需求原则 2：尽早启动测试工作原则 3：Pareto 法则应用于软件测试，28 效率法则，在分析设计实现阶段的复审和测试工作能够发现和避免 80%的缺陷，而系统测试又能找到其余缺陷中的 80%，最后 4%的缺陷可能只有在用户的大范围长时间使用后才会暴露出来。原则 4：穷尽测试是不可能的。原则 5：杀虫剂怪事。即软件测试越多，其对测试的免疫力越强。原则 6：前进两步，后退一步。 测试中一个基本问题为：缺陷修复总会以 20-50%的机率引入新的缺陷。每次修复之后，必须重新运行先前所有的测试用例，从而确保系统不会以隐蔽的方式被破坏。 原则 7：三心二意：细心信心耐心、团队合作的沟通意识、时刻保持怀疑的态度且有缺陷预防意识 软件测试规范：ISO9000 和 CMM ISO9000：控制思想，即对产品形成的全过程，从采购原材料、加工制造到最终产品的销售、售后服务进行控制。预防思想 CMM：对软件企业的评估从初始级开始，共分 5 级。CMM 是专门为软件开发组织设计的，侧重于软件开发和改进过程，在产品的设计和开发细节做了较多要求。 测试系统主要由 6 个相互关联，相互作用的过程组成：测试管理、资源管理、配置管理、测试设计、测试规划、测试实施。 测试过程中一般会从一下几个方面入手来规范过程： 一、搭建测试环境###搭建环境前： 1、确定测试目的。功能测试、稳定性测试还是性能测试，测试目的不同，搭建测试环境时注意的点也不同。功能测试：不需要大量的数据，需要覆盖率搞，测试数据要求尽量真实。性能测试：可能需要大量存量数据或者与实际硬件环境尽可能相似的硬件配置。 2、测试的软件环境尽可能的模拟真实环境。尽可能模拟用户使用环境，选用合适的操作系统和软件平台。了解符合测试软件运行的最低要求及用户使用的硬件配置。了解用户常用的软件，避免所有配置所有操作系统下都要进行测试，没有侧重点，浪费时间。产品化的测试则需要考虑兼容性方案。 3、营造独立的测试环境不同的项目、公司会对测试环境的独立性有不同的要求。测试过程中尽量保证测试环境独立，不会受到其他测试人员以及项目研发人员的影响。 4、构建可复用的测试环境通过备份或数据隔离的方式；重复运用一套测试环境进行多版本多时间段的测试。 5、搭建测试环境过程分析线下搭建 独立测试服务器或虚拟机测试环境配置测试项目导入测试环境配置 配置 java 环境（下载 jdk 并配置环境变量）下载并安装中间件（tomcat、jetty 或其他）安装数据库并导入初始化脚本Docker 模式 把自己想要的环境封装在一个盒子里，想用的时候随时可以用。 构建属于自己的 image 一键 deploy 依赖第三方平台（蚂蚁金融云、阿里金融云等） 二、测试环境落地环境建设落地考虑点：用途、使用成本、维护成本 基本架构：研发环境：用于研发自测、集成测试。 联测环境：完备环境，用于大型联测。 外联环境（如果有需求）：稳定版本环境，用于外部商户等联调。 简单的测试过程 测试管理过程： 测试人员 制定测试计划 → 设计测试用例 → 执行测试 → 提交测试发现的问题 → 所有问题已修复（否 → 修改问题）→ 结束 测试过程划分：需求分析测试阶段 &amp; 软件方案测试阶段 1、需求分析阶段：进行测试需求的分析 2、测试计划阶段： 确定需要测试的内容和质量特征 明确测试的充分性要求 明确测试的基本方法 确定测试的资源和技术需求（人力资源、机器、工具资源等，是否需要安全测试、性能测试、自动化测是等）进行风险分析与评估（如是不是有哪些内容无法测试，由于数据环境等原因无法测试充分，结果没有百分之百的可行性）根据上述分析结果制定测试计划根据测试计划开展相应的测试控制活动需求测试：测试工程师参与需求分析，对需求了解很深刻，减少与开发人员的交互，节省时间。早期确定测试用例的编写思路，为测试打好基础可以获取一些测试数据，为测试用例设计提供帮助可以发现需求不合理的地方，降低测试成本（比如违反正常操作规范的那个）需求测试的作用：测试需求的分析用来确定整个测试工作，明确测试对象以及测试工作的范围和作用，并作为测试覆盖的基础。被确定的测试需求项必须是可核实的，测试需求必须有个可观察，可评测的结果。（比如转账手续费，必须可见，某些需求是不行的，比如“软件药好用”）测试需求分析还包括与客户交流以澄清某些混淆明确哪些需求更重要，需求等级分层（比如支付宝要上余额宝的时候）确保风险承担者尽早地对项目达成共识测试需求是制订测试计划的基本依据测试需求是设计测试用例的指导确定了要测什么、测哪些方面才能有效设计用例需求验证过程中要做什么：1、审查需求文档对需求文档及相关模型进行仔细检查在需求开发期间所做的非正式评审也是有利的2、以需求为依据编写测试用例编写用户手册（比较简单，作为后续制定真正的用户手册的基础或者跟客户对接的基本依据） 3、确定合格标准余额宝需求测试实战【已完成】 测试前的思考写用例之前要想到的问题： 1、要测试的系统是干什么的？2、了解系统有哪些特点？3、系统有哪些功能？4、系统哪些部分需要测试？哪些不需要测试？5、系统对性能、安全性等有什么要求？等测试策略要素：测试策略是测试计划的一部分，对于测试理念来说，测试策略、测试计划、测试方案各有偏重点，在实现的时候可能三者合一。 测试安排 发布计划 罗列里程碑 DDL，每个里程碑都有明确的 DDL如果时间安排不足，后续的测试范围中挑选优先级比较高的特性来执行测试，必须保证核心功能正常使用测试范围 （按优先级排序）分为 In Scope 和 Out Of Scope 需要说明哪些模块是在测试范围中的，哪些是本阶段测试不考虑的对于在测试范围中的模块，需要给出优先级 不在范围中的模块 需要给出原因测试资源 【人力和工具】 人力主要说明参与测试的人员 包括很多角色 比如专业测试人员 客户 产品经理等工具主要是指可能用到其他软件测试环境 包括推荐环境解决方案、操作系统、软硬件对于推荐解决方案，需要陈述的是对测试项目对其他软件的依赖，比如测试 i 项目对 JAVA 版本有依赖，推荐版本 1.7测试方法 测试方法罗列主要是为了说明针对测试项目我们要开展哪些类型的测试功能测试必须，非功能测试是可选的文档管理 包含安装、升级文档、用户指南等文档不单单是一个文件 需要完整的测试才能发布给客户风险管理 列出来已知的可能会出现不确定性因素这些因素可能来自技术 资源或者其他的 比如并发 3E（拼多多） C/S 项目做自动化但是缺少商业工具 测试方案设计：测试策略：侧重需求分析，评估风险，定义测试范围，确定测试方法，制定测试启动、停止、完成标准和条件测试计划：制定项目测试过程中的测试重点。 各个阶段的任务分配以及时间进度安排，并提出对各项任务的评估，风险分析，可以包括测试策略测试方案：侧重测试的放啊，测试环境的规划。 测试工具的设计和选择，测试用例的设计方法，测试代码的设计方案。实际： 测试方案=测试计划+用例设计方案+工具选择+自动化/性能测试具体方案 测试方案评审评审目的： 呈现测试的工作：包括测试的时间安排、每个阶段需要如何配合、测试如何开展。与开发达成共识头脑风暴评审重点: 采用的测试方法：是否需要性能、安全、自动化等等价类划分依据：测试数据的选取和准备方法：比如：验证计算器功能，需要选择数据，说明选择该数据的原因等流程测试的路径组合：比如：tb 购买商品：登录 → 查看商品 → 加入购物车 → 下单 → 地址 → 付款等，评审要检查是否覆盖到核心流程。数据比对 选取的对象和数据检查点是否需要模拟数据及模拟数据方法基于风险的测试取舍测试过程划分 思考：余额宝体现到银行卡需要思考哪些功能点？]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>测试笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典测试面试题]]></title>
    <url>%2F2019%2F05%2F07%2F%E7%BB%8F%E5%85%B8%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[经典等价类划分面试题-【购成三角形】问题思考需求说明：一个程序读入三个整数，把这三个数值看作一个三角形的 3 条边的长度值利用等价类划分法，给出足够的测试用例。程序打印信息，说明三角形是不等边、等腰、等边。 1、如何选定功能点？实际工作中功能点的确认依赖于需求给定，或者更确切一点就是输出结果的类型。 比如此题： 如果输出结果只有两种 “能构成三角形”和“不能构成三角形”，那么有效等价类就只有 ①a\b\c&gt;0 ②a+b&gt;c,a+c&gt;b,b+c&gt;a 然而题中规定输出三种结果“不等边”、“等腰”、“等边”，所以等价类划分应该以此为依据。 2、有效类和无效类是否需要对应？每个功能点是否必须同时具有有效类和无效类？有效类和无价类之间并没有一一对应的关系，可以分开划分。一个功能点会产生多个用例，用例通过不同设计方法来实现，所以功能点跟等价类并没有对应关系。 3、是否需要考虑输入数字的先后关系？如果是三个不同入参，在设计用例时，对 a、b、c 分别进行区分。 参考答案 经典因果图判定表面试题-【犯错扣工资】问题问题描述：年薪 a1 月薪 a2普通错误 a3 严重错误 a4a1 犯普通错误扣工资 2% （b1） a1 犯严重错误扣 6% （b2）a2 犯普通错误扣 4% （b3） a2 犯严重错误扣 8% （b4）其中 a1 a2、 b1b2 和 b3b4 互斥 a3 和 a4 可以同时具备]]></content>
      <categories>
        <category>测试笔记</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
</search>
